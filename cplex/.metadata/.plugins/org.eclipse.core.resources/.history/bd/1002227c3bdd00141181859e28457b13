import ilog.concert.*;
import ilog.cplex.*;

public class optimizerTester {
	
	public static void main(String[] args) {
		
	
			
		int HOUR = 10; //hours in a year in this test
		double[] load = {5, 7, 8, 3, 10, 11, 7, 8, 4, 15}; // load per Hour
		double maxEnergycontentStorage = 10;
		double minEnergycontentStorage = 0;
		double maxStorageFlowIn = 1.5;
		double minStorageFlowIn = 0.75;
		double maxStorageFlowOut = 2;
		double minStorageFlowOut = 1;
		double n = 0.90; // Storage efficiency
		double nInv = 1/n; // Inverse efficiency
		
		
		try {
			//define new model
			IloCplex cplex = new IloCplex();
			
			// define variables
			IloNumVar[] sIn = new IloNumVar[HOUR];
			for (int i = 0; i < HOUR; i++) {
				sIn[i] = cplex.numVar(minStorageFlowIn, maxStorageFlowIn);
			};
			
			IloNumVar[] sOut = new IloNumVar[HOUR];
			for (int i = 0; i < HOUR; i++) {
				sOut[i] = cplex.numVar(minStorageFlowOut, maxStorageFlowOut);
			}
			
			IloNumVar[] e = new IloNumVar[HOUR];
			for (int i = 0; i < HOUR; i++) {
				e[i] = cplex.numVar(minEnergycontentStorage, maxEnergycontentStorage);
			}
			
			IloNumVar[] loadPerHour = new IloNumVar[HOUR];
			for (int i = 0; i < HOUR; i++) {
				loadPerHour[i] = cplex.numVar(load[i], load[i]);
			}
			
			// define expressions
			IloLinearNumExpr[] storageContent = new IloLinearNumExpr[HOUR];
			for (int i = 0; i < HOUR; i++) {
				storageContent[i] = cplex.linearNumExpr();
				storageContent[i].addTerm(1.0, e[i]);
				storageContent[i].addTerm(n, sIn[i]);
				storageContent[i].addTerm(-nInv, sOut[i]);
			}
			
			IloLQNumExpr objective = cplex.lqNumExpr();
			for (int i = 0; i < HOUR; i++) {
				objective.addTerm(1, loadPerHour[i], loadPerHour[i]);
				objective.addTerm(1, sIn[i], sIn[i]);
				objective.addTerm(1, sOut[i], sOut[i]);
				objective.addTerm(2, loadPerHour[i], sIn[i]);
				objective.addTerm(-2, loadPerHour[i], sOut[i]);
				objective.addTerm(-2, sIn[i], sOut[i]);
				
				
			}
			
			// define objective function
			cplex.addMinimize(objective);
			
			//define constraints
			for(int i = 1; i < HOUR - 1; i++){
				cplex.addEq(storageContent[i], e[i + 1]);
			}
			
			// solve model
			if (cplex.solve()) {
				System.out.println("objective function is:");
				System.out.println(cplex.getObjValue());
				
				}
			else {
				System.out.println("model did not sovle");
			}
			
			// close cplex
			cplex.end(); 
			
			
		}
		catch (IloException exc) {
			exc.printStackTrace();
		}
	
	}

}
